//api.ts
export const sendMessage = async (
    chatId: number,
    text: string,
    BOT_TOKEN: string,
    parseMode: "Markdown" | "HTML" | false = false // –£–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è parseMode
): Promise<void> => {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
        chat_id: chatId,
        text,
        parse_mode: parseMode ? parseMode : undefined, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
    };

    try {
        await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
};


  export const sendMainButton = async (
      chatId: number,
      BOT_TOKEN: string
    ): Promise<void> => {
      const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
      const payload = {
        chat_id: chatId,
        text: "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup: {
          inline_keyboard: [[{ text: "‚ò∞", callback_data: "main_menu" }]],
        },
      };
    
      try {
        await fetch(url, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏:", error);
      }
    };

  export const sendMenu = async (
    chatId: number,
    menuContent: any[],
    BOT_TOKEN: string
  ): Promise<void> => {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
      chat_id: chatId,
      text: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      reply_markup: {
        inline_keyboard: menuContent,
      },
    };
  
    try {
      await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:", error);
    }
  };
  
  
  export async function checkSubscription(userId: number, BOT_TOKEN: string, CHANNEL_CHAT_ID: string): Promise<boolean> {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/getChatMember?chat_id=${CHANNEL_CHAT_ID}&user_id=${userId}`;
  
    try {
      const response = await fetch(url);
      const data: any = await response.json();

      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    //   console.log(`–ó–∞–ø—Ä–æ—Å –∫ Telegram API: ${url}`);
    //   console.log(`–û—Ç–≤–µ—Ç –æ—Ç Telegram API —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    //   console.log("–û—Ç–≤–µ—Ç –æ—Ç Telegram API:", data);

      if (data.ok && data.result?.status === "member") {
        // console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω");
        return true;
      } else {
        // console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, —Å—Ç–∞—Ç—É—Å:", data.result?.status);
        return false;
      }
    } catch (error) {
    //   console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
      return false;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TELEGRAM_BOT_TOKEN
export const getBotName = async (botToken: string): Promise<string> => {
    const url = `https://api.telegram.org/bot${botToken}/getMe`;
    
    try {
      const response = await fetch(url);
      const data:any  = await response.json();
      
      if (data.ok && data.result) {
        return data.result.first_name || '–ë–æ—Ç';  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –±–æ—Ç–∞
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –±–æ—Ç–∞:', data.description);
        return '–ë–æ—Ç';  // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API:', error);
      return '–ë–æ—Ç';  // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è
    }
  };

